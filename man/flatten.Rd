% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/misc.R
\name{flatten}
\alias{flatten}
\alias{flatten.default}
\alias{flatten.svg_chopped}
\alias{flatten.svg_chopped_list}
\title{Simplify "svg_chopped" Structure}
\usage{
flatten(x, ...)

\method{flatten}{default}(x, ...)

\method{flatten}{svg_chopped}(x, ...)

\method{flatten}{svg_chopped_list}(x, ...)
}
\arguments{
\item{x}{an object to flatten}
}
\value{
the object flattened
}
\description{
\code{flatten} collapses "svg_chopped" recursive structure by placing all
non-"hidden" terminal nodes into a one level list.  Flattened
"svg_chopped_list" objects will retain distinct elements for each
"svg_chopped" contained therein, so an "svg_chopped_list_flat" object will
have two levels: one for the "svg_chopped_flat" objects, and one for the
visible terminal leaves of those.
}
\details{
When flattening terminal leaves are retrieved via depth-first recursion into
a single level list for each "svg_chopped" object.  Terminal elements
defined inside "defs" will be hidden.  Attributes for the "svg_chopped",
"svg_chopped_list", and terminal nodes are retained.

For convenience the flat list is named with the numeric index of the element
and the svg element name.  The underlying recursive list is unnamed so we
use the name to succinctly display key information about the object when
examined with \code{\link[utils:str]{utils::str()}} (see example).
}
\examples{
## Normal "svg_chopped" objects are tree-like
svg <- chop(svg_samples('shapes'))
str(svg, max.level=4, list.len=3)

## Flattened ones are linearized and lose hidden elements
svgf <- flatten(svg)
str(svgf, list.len=8)
length([[1]]) # number of distinct SVG elements

## We can use this to plot only parts of the SVG
old.par <- par(mfrow=c(2,2), mai=rep(.1, 4))
plot(svgf, scale=TRUE)             # full plot
plot(svgf[[1]][4], scale=TRUE)     # one item
plot(svgf[[1]][4:6], scale=TRUE)   # more
plot(svgf[[1]][10:12], scale=TRUE) # more
par(old.par)
}

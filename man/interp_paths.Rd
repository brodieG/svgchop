% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interp.R
\name{interp_paths}
\alias{interp_paths}
\title{Interpolate Path Curves}
\usage{
interp_paths(x, steps = 10, box = NULL, normalize = FALSE)
}
\arguments{
\item{x}{a "svg_paths" S3 object as produced by \code{\link[=parse_paths]{parse_paths()}}}

\item{box}{integer(4) or NULL, the x and y offset of the SVG display box, and
the width and height of that box, in that order.  If NULL these values will
be those that define the "bounding" box of the coordinates in \code{x}, although
The bounding box is defined simply to contain the supplied points,
including control points.}

\item{normalize}{whether coordinates should be returned in 0-1 range.  If the
input range is not square the longest dimension will span 0-1 and the
shorter one whatever range preserves the aspect ratio, centered at 0.5.}
}
\value{
a "svg_paths_xy" S3 object, which is like a "svg_paths" object, but
the coordinates are expressed purely as x-y values and should be
interpreted as the vertices of a polygon or connected straight line
segments.
}
\description{
Converts an SVG paths in the format produced by \code{\link[=parse_els]{parse_els()}} into pure x-y
coordinates by interpolating the Bezier curves, if any.  Due to how
\code{gridBezier} works this requires spawning a new device.
}
\seealso{
\code{\link[=parse_paths]{parse_paths()}}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse.R
\name{process_svg}
\alias{process_svg}
\title{Convert SVG Elements to Polygons}
\usage{
process_svg(file, steps = 10)
}
\arguments{
\item{file}{an HTML or other XML based text file containing SVG elements.}
}
\value{
an "svg_chopped_list" S3 object, which is a list of "svg_chopped"
objects.  Each "svg_chopped" object represents an SVG viewport the
dimensions of which are recorded in the "box" attribute.  "svg_chopped"
objects are recursive lists with \verb{2 x n} numeric matrices as terminal
leaves.  The matrices contain the X-Y coordinates of the ordered \code{n}
endpoints of the \code{n - 1} line segments that the polygon representation of
the SVG elements comprise.
}
\description{
Parse and convert SVG elements into polygons.  SVG transforms are applied to
the polygon coordinates, and SVG presentation attributes are computed from
style sheets, inline styles and attributes, and are attached as the
"style-computed" R attribute.
}
\section{Lengths}{


All lengths are assumed to be unit-less.  In other words "px", "em", "cm",
etc. values are completely ignored.
}

\section{Elements}{


Currently svg "path", "rect", "polygon", "circle", and "ellipse"  elements
are supported to varying degrees.  Every command for "path" in the SVG 1.1
spec is implemented (MZLHVCSQTA, and the relative equivalents).  "rect" does
not support rounded corners, and "ellipse" does not support "auto" values for
"rx" and "ry" (that is the default, but we assume 0).  "pathLength" is not
supported on any element.

"g" elements act as containers for child elements and convey their properties
to them.

The "use" element is supported, but only if the "xlink:href" or "href"
elements point to the id of an element within the same document.  Support is
also non-conforming (not that anything in this package is truly
conforming...) as CSS selector matching behaves as if the cloned copy of the
object were a full DOM child of the "use" element.  However, this
non-conformance is likely superseded by the very limited CSS selector
implementation (see "Styling" section).  The "use" element will be treated
exactly as if it were a "g" element with the referenced element as a child
and the "x" and "y" attributes specified as a translate transform.

Elements not explicitly referenced here are not directly supported and how
they are processed is not specified.  Generally though such elements with
children will behave like "g" elements, and those without will be omitted.
}

\section{Transforms}{


Only SVG transforms are supported (i.e. not CSS ones).  The transform
attribute of every element in the SVG is read, parsed, and accumulated
through element generations.  It is then applied to the computed coordinates
of the terminal nodes.
}

\section{Styling}{


Style attributes attached directly to elements, whether as "style" attributes
or explicitly as e.g. a "fill" attribute, are parsed and interpreted.  CSS
styles are also processed, but support is limited to direct match
lookups on ASCII class-only and id-only selectors (i.e. no hierarchies,
properties, etc.).

CSS support is likely to be particularly fragile as the CSS parsing is regex
based and only simple ASCII-only class and id selectors are supported.

Styles, classes, and ids are accumulated through element generations and
computed into the "styles-computed" attribute of the terminal nodes, which is
a list with scalar elements representing the computed style values.  Missing
or uncomputable styles are reported as NA.  The computation is \emph{intended} to
mimic how browsers would interpret style, although on a limited basis that is
likely incorrect in many cases.

Colors are returned as 6 digit hex-codes so that it is easy to append alpha
values derived from the opacity values.  One exception is the "none" "color"
that is returned as is so that it may be distinguished from unspecified color
(those are NA).  If an element specifies both "opacity" and "stroke-opacity"
or "fill-opacity", the latter two are multiplied by the value of "opacity".
Since the "opacity" value is thus reflected in "stroke-opacity" and
"style-opacity" it is #' dropped to avoid confusion.
}

